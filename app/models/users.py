from typing import Optional
from pydantic import BaseModel, Field
from datetime import datetime


class UserCreateRequest(BaseModel):
    """Request model for creating a new user with Google/Apple login"""
    provider: str = Field(..., description="Authentication provider (google or apple)")
    email: str = Field(..., description="User email from OAuth provider")
    cavos_user_id: str = Field(..., description="Unique ID from the OAuth provider")
    wallet_address: str = Field(..., description="Wallet address generated by Cavos")


class UserCreateResponse(BaseModel):
    """Response model for user creation"""
    success: bool = True
    data: dict = Field(default_factory=dict)

    @classmethod
    def create_success(cls, user_id: str, created_at: datetime):
        """Create a successful response"""
        return cls(
            success=True,
            data={
                "user_id": user_id,
                "created_at": created_at.isoformat()
            }
        )


class UserApiCredentials(BaseModel):
    """API credentials model"""
    user_id: str
    extended_api_key: Optional[str] = None
    extended_secret_key: Optional[str] = None
    extended_stark_private_key: str
    environment: str = "testnet"
    is_mock_enabled: bool = True
    created_at: datetime
    updated_at: datetime


class User(BaseModel):
    """User model"""
    id: str
    email: Optional[str] = None
    provider: Optional[str] = None
    cavos_user_id: Optional[str] = None
    wallet_address: Optional[str] = None
    created_at: datetime
    updated_at: datetime
    api_credentials: Optional[UserApiCredentials] = None

    class Config:
        from_attributes = True


class UserResponse(BaseModel):
    """Standard user response model"""
    user_id: str
    email: Optional[str] = None
    created_at: datetime 
    has_api_credentials: bool = False 